import jsPDF from 'jspdf';

/**
 * Generates and downloads a PDF report for a campaign
 * @param {Object} campaign - The campaign data object
 */
export const generateCampaignPDF = (campaign) => {
    if (!campaign) return;

    const doc = new jsPDF();
    let yPosition = 20;
    const pageWidth = doc.internal.pageSize.width;
    const margin = 20;

    // Helper function to add text with automatic page breaks
    const addText = (text, fontSize = 12, isBold = false, color = '#000000') => {
        doc.setFontSize(fontSize);
        doc.setFont(undefined, isBold ? 'bold' : 'normal');
        doc.setTextColor(color);

        if (yPosition > 270) {
            doc.addPage();
            yPosition = 20;
        }

        doc.text(text, margin, yPosition);
        yPosition += fontSize * 0.6 + 5;
    };

    const addLine = () => {
        yPosition += 5;
        doc.setDrawColor(200, 200, 200);
        doc.line(margin, yPosition, pageWidth - margin, yPosition);
        yPosition += 10;
    };

    // Title
    addText('SENTRAC - Campaign Report', 24, true, '#8B5CF6');
    addText(campaign.name, 18, true);
    addText(
        `${new Date(campaign.startDate).toLocaleDateString()} - ${new Date(
            campaign.endDate
        ).toLocaleDateString()}`,
        12
    );
    addLine();

    // Key Metrics
    addText('KEY METRICS', 16, true, '#8B5CF6');
    addText(`Engagement Rate: ${campaign.engagementRate}%`);
    addText(`Total Reach: ${campaign.totalReach.toLocaleString()} users`);
    addText(`Completion Rate: ${campaign.completionRate}%`);
    addText(`Viral Coefficient: ${campaign.viralCoefficient}`);
    addLine();

    // Sentiment Analysis
    addText('SENTIMENT ANALYSIS', 16, true, '#8B5CF6');
    addText(`Positive: ${campaign.sentiment.positive}%`);
    addText(`Neutral: ${campaign.sentiment.neutral}%`);
    addText(`Negative: ${campaign.sentiment.negative}%`);
    addLine();

    // Platform Performance
    addText('PLATFORM PERFORMANCE', 16, true, '#8B5CF6');
    campaign.platformComparison.forEach((platform) => {
        addText(`${platform.platform.toUpperCase()}:`);
        addText(`  • Reach: ${platform.reach.toLocaleString()}`, 11);
        addText(`  • Engagement: ${platform.engagement}%`, 11);
        addText(`  • Sentiment: ${platform.sentiment}`, 11);
    });
    addLine();

    // Top Influencers
    addText('TOP INFLUENCERS', 16, true, '#8B5CF6');
    campaign.influencers.slice(0, 5).forEach((influencer) => {
        addText(`${influencer.name} (${influencer.handle})`);
        addText(
            `  • Posts: ${influencer.posts} | Engagement: ${influencer.engagement
            }% | Followers: ${influencer.followers.toLocaleString()}`,
            11
        );
    });
    addLine();

    // Top Hashtags
    addText('TOP HASHTAGS', 16, true, '#8B5CF6');
    campaign.hashtags.slice(0, 8).forEach((hashtag) => {
        addText(
            `${hashtag.tag}: ${hashtag.sentiment} sentiment (${hashtag.usage} uses)`,
            11
        );
    });
    addLine();

    // Audience Insights
    addText('AUDIENCE INSIGHTS', 16, true, '#8B5CF6');
    addText('Top Regions:', 14, true);
    campaign.audienceInsights.topRegions.forEach((region) => {
        addText(`  • ${region.region}: ${region.percentage}%`, 11);
    });

    yPosition += 5;
    addText('Age Groups:', 14, true);
    campaign.audienceInsights.demographics.ageGroups.forEach((group) => {
        addText(`  • ${group.group}: ${group.percentage}%`, 11);
    });

    // Footer
    doc.setFontSize(10);
    doc.setTextColor('#666666');
    doc.text(
        'Generated by Sentrac Analytics Platform',
        margin,
        doc.internal.pageSize.height - 10
    );

    // Download the PDF
    doc.save(`${campaign.name.replace(/\s+/g, '_')}_Report.pdf`);
}; 